/// This file is re-generated by kickzig when a screen is added or removed.
/// DO NOT EDIT THIS FILE.
pub const std = @import("std");
pub const initialize = @import("src/initialize.zig");
pub const fatal = @import("src/fatal.zig");

pub const add = @import("src/add.zig");
pub const edit = @import("src/edit.zig");

const testing = std.testing;

pub const Channels = struct {
    allocator: std.mem.Allocator,
    initialize: *initialize.Group,
    fatal: *fatal.Group,
    add: *add.Group,
    edit: *edit.Group,
};

pub fn init(allocator: std.mem.Allocator) !*Channels {
    var channels: *Channels = try allocator.create(Channels);
    // Defaults.
    channels.initialize = initialize.init(allocator) catch |err| {
        allocator.destroy(channels);
        return err;
    };
    channels.fatal = fatal.init(allocator) catch |err| {
        channels.initialize.deinit();
        allocator.destroy(channels);
        return err;
    };

    channels.add = add.init(allocator) catch |err| {
        channels.initialize.deinit();
        channels.fatal.deinit();
        allocator.destroy(channels);
        return err;
    };

    channels.edit = edit.init(allocator) catch |err| {
        channels.initialize.deinit();
        channels.fatal.deinit();
        channels.add.deinit();
        allocator.destroy(channels);
        return err;
    };

    return channels;
}
