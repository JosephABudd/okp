// This file is re-generated by kickzig when a message is added or removed.
// DO NOT EDIT THIS FILE.
const std = @import("std");
const testing = std.testing;

const ExitFn = @import("various").ExitFn;
const _backend_to_frontend_CloseDownJobs_ = @import("backtofront/CloseDownJobs.zig");
const _frontend_to_backend_CloseDownJobs_ = @import("fronttoback/CloseDownJobs.zig");

/// FrontendToBackend is each message's channel.
pub const FrontendToBackend = struct {
    allocator: std.mem.Allocator,

    // Custom channels.
        CloseDownJobs: *_frontend_to_backend_CloseDownJobs_.Group,

    pub fn deinit(self: *FrontendToBackend) void {
        self.CloseDownJobs.deinit();
        self.allocator.destroy(self);
    }


    pub fn init(allocator: std.mem.Allocator, exit: ExitFn) !*FrontendToBackend {
        var channels: *FrontendToBackend = try allocator.create(FrontendToBackend);
        channels.allocator = allocator;
    
        // Customs.
        channels.CloseDownJobs = _frontend_to_backend_CloseDownJobs_.init(allocator, exit) catch |err| {
            allocator.destroy(channels);
            return err;
        };

        return channels;
    }
};


/// BackendToFrontend is each message's channel.
pub const BackendToFrontend = struct {
    allocator: std.mem.Allocator,

    // Custom channels.
        CloseDownJobs: *_backend_to_frontend_CloseDownJobs_.Group,

    pub fn deinit(self: *BackendToFrontend) void {
        self.CloseDownJobs.deinit();
        self.allocator.destroy(self);
    }


    pub fn init(allocator: std.mem.Allocator, exit: ExitFn) !*BackendToFrontend {
        var channels: *BackendToFrontend = try allocator.create(BackendToFrontend);
        channels.allocator = allocator;
    
        // Customs.
        channels.CloseDownJobs = _backend_to_frontend_CloseDownJobs_.init(allocator, exit) catch |err| {
            allocator.destroy(channels);
            return err;
        };

        return channels;
    }
};

/// Trigger is each trigger.
pub const Trigger = struct {
    allocator: std.mem.Allocator,


    pub fn deinit(self: *Trigger) void {
        self.allocator.destroy(self);
    }

    pub fn init(backend_to_frontend: *BackendToFrontend, exit: ExitFn) !*Trigger {
        var triggers: *Trigger = try backend_to_frontend.allocator.create(Trigger);
        triggers.allocator = backend_to_frontend.allocator;
    
        _ = exit;

        return triggers;
    }
};

