/// This is the back-end's "add" message handler.
/// It receives and processes the "add" message.
/// The "add" message it at shared/message/src/add.zig.
/// This file was generated by kickzig when you added the "add" message.
/// This file will be removed by kickzig when you remove the "add" message.
/// KICKZIG TODO: Customize fn receiveFn.
const std = @import("std");
const _channel_ = @import("channel");
const _message_ = @import("message");

pub const Messenger = struct {
    allocator: std.mem.Allocator,
    send_channels: *_channel_.Channels,

    pub fn deinit(self: *Messenger) void {
        self.allocator.destroy(self);
    }

    /// receiveFn receives an "add" message from the front-end.
    /// It implements _channel_.Channels.add.Behavior.receiveFn found in shared/channel/src/add.zig.
    /// receiveFn does not control add_message because only message dispatchers control messages.
    /// For that reason:
    /// * data from param add_message must be copied to be preserved.
    /// * param add_message can safely be sent back to the front-end.
    pub fn receiveFn(self_ptr: *anyopaque, add_message: *_message_.add.Message) void {
        var self: *Messenger = @alignCast(@ptrCast(self_ptr));
        _ = self;
        _ = add_message;

        std.debug.print("backend got the add message.\n", .{});
    }
};

pub fn init(allocator: std.mem.Allocator, send_channels: *_channel_.Channels, receive_channels: *_channel_.Channels) !*Messenger {
    var messenger: *Messenger = try allocator.create(Messenger);
    messenger.allocator = allocator;
    messenger.send_channels = send_channels;
    var behavior = try receive_channels.add.initBehavior();
    errdefer {
        messenger.deinit();
    }
    behavior.self = messenger;
    behavior.receiveFn = &Messenger.receiveFn;
    try receive_channels.add.subscribe(behavior);
    errdefer {
        messenger.deinit();
    }
    return messenger;
}
