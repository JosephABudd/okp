/// This is the back-end's "edit" message handler.
/// It receives and processes the "edit" messages sent by the front-end.
/// The "edit" message it at shared/message/src/edit.zig.
/// This file was generated by kickzig when you added the "edit" message.
/// This file will be removed by kickzig when you remove the "edit" message.
/// KICKZIG TODO: Customize fn receiveFn.
const std = @import("std");
const _channel_ = @import("channel");
const _message_ = @import("message");

pub const Messenger = struct {
    allocator: std.mem.Allocator,
    send_channels: *_channel_.Channels,

    pub fn deinit(self: *Messenger) void {
        self.allocator.destroy(self);
    }

    /// receiveFn receives an "edit" message from the front-end.
    /// It implements _channel_.Channels.edit.Behavior.receiveFn found in shared/channel/src/edit.zig.
    /// receiveFn does not control param edit_message because only message dispatchers control messages.
    /// For that reason:
    /// * data from param edit_message must be copied to be preserved.
    /// * param edit_message can safely be sent back to the front-end.
    pub fn receiveFn(self_ptr: *anyopaque, edit_message: *_message_.edit.Message) void {
        var self: *Messenger = @alignCast(@ptrCast(self_ptr));
        _ = edit_message;
        _ = self;

        std.debug.print("backend got the edit message.\n", .{});
    }
};

pub fn init(allocator: std.mem.Allocator, send_channels: *_channel_.Channels, receive_channels: *_channel_.Channels) !*Messenger {
    var messenger: *Messenger = try allocator.create(Messenger);
    messenger.allocator = allocator;
    messenger.send_channels = send_channels;
    var behavior = try receive_channels.edit.initBehavior();
    errdefer {
        messenger.deinit();
    }
    behavior.self = messenger;
    behavior.receiveFn = &Messenger.receiveFn;
    try receive_channels.edit.subscribe(behavior);
    errdefer {
        messenger.deinit();
    }
    return messenger;
}
