/// This is the fatal message.
/// It signals to the front-end that the back-end is shutting down.
/// This file was generated by kickzig when you initialized the framework.
/// DO NOT EDIT THIS FILE.
const std = @import("std");

pub const Message = struct {
    _allocator: std.mem.Allocator = undefined,
    _inits: i32 = 0,
    errorName: ?[:0]const u8 = undefined,

    pub fn deinit(self: *Message) void {
        self._inits -= 1;
        if (self._inits == 0) {
            self._allocator.destroy(self);
        }
        // This message does not have control of errName which was allocated on the stack.
    }

    pub fn reinit(self: *Message) void {
        self._inits += 1;
    }

    pub fn setError(self: *Message, err: anyerror) void {
        self.errorName = @errorName(err);
    }
};

pub fn init(allocator: std.mem.Allocator, err: ?anyerror) !*Message {
    var message: *Message = try allocator.create(Message);
    message._allocator = allocator;
    message._inits = 1;
    if (err != null) {
        message.errorName = @errorName(err.?);
    }
    return message;
}
