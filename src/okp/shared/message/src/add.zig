/// This file was generated by kickzig when you added the "add" message.
/// This file will be removed by kickzig if you remove the "add" message.
const std = @import("std");

/// This is the "add" message.
/// This file was generated by kickzig when you added the "add" message.
/// This file will be removed by kickzig if you remove the "add" message.
/// KICKZIG TODO:  Add your own Message fields (payload) and methods.
pub const Message = struct {
    _allocator: std.mem.Allocator = undefined,
    _inits: i32 = 0,

    pub fn deinit(self: *Message) void {
        self._inits -= 1;
        if (self._inits == 0) {
            self.deinit_payload();
            self._allocator.destroy(self);
        }
    }

    /// KICKZIG TODO: Customize deinit_payload to handle your own fields.
    fn deinit_payload(self: *Message) void {
        _ = self;
    }

    pub fn reinit(self: *Message) void {
        self._inits += 1;
    }
};

/// init constructs a new Message.
/// KICKZIG TODO: customize this constructor with your own fields (payload).
pub fn init(allocator: std.mem.Allocator) !*Message {
    var message: *Message = try allocator.create(Message);
    message._allocator = allocator;
    message._inits = 1;
    return message;
}
