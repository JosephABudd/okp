
// Tab bar.

pub fn horizontalTabBar(src: std.builtin.SourceLocation) !*TabBarWidget {
    var ret = try currentWindow().arena.create(TabBarWidget);
    ret.* = TabBarWidget.init(src, .horizontal, .{ .background = true, .expand = .none });
    try ret.install(.{});
    return ret;
}

pub fn verticalTabBar(src: std.builtin.SourceLocation) !*TabBarWidget {
    var ret = try currentWindow().arena.create(TabBarWidget);
    ret.* = TabBarWidget.init(src, .vertical, .{ .background = true, .expand = .none });
    try ret.install(.{});
    return ret;
}

pub const TabBarWidget = struct {
    const Self = @This();
    pub var defaults: Options = .{
        .color_style = .window,
    };

    wd: WidgetData = undefined,

    winId: u32 = undefined,
    dir: Direction = undefined,
    box: BoxWidget = undefined,

    mouse_over: bool = false,

    pub fn init(src: std.builtin.SourceLocation, dir: Direction, opts: Options) TabBarWidget {
        var self = Self{};
        const options = defaults.override(opts);
        self.wd = WidgetData.init(src, .{}, options);

        self.winId = subwindowCurrentId();
        self.dir = dir;

        return self;
    }

    pub fn install(self: *Self, opts: struct {}) !void {
        _ = opts;
        _ = parentSet(self.widget());
        try self.wd.register("TabBar", null);
        try self.wd.borderAndBackground(.{});

        var evts = events();
        for (evts) |*e| {
            if (!eventMatch(e, .{ .id = self.data().id, .r = self.data().borderRectScale().r }))
                continue;

            self.processEvent(e, false);
        }

        self.box = BoxWidget.init(@src(), self.dir, false, self.wd.options.strip().override(.{ .expand = .both }));
        try self.box.install(.{});
    }

    pub fn close(self: *Self) void {
        // bubble this event to close all popups that had subtabBars leading to this
        var e = Event{ .evt = .{ .close_popup = .{} } };
        self.processEvent(&e, true);
        refresh();
    }

    pub fn widget(self: *Self) Widget {
        return Widget.init(self, data, rectFor, screenRectScale, minSizeForChild, processEvent);
    }

    pub fn data(self: *Self) *WidgetData {
        return &self.wd;
    }

    pub fn rectFor(self: *Self, id: u32, min_size: Size, e: Options.Expand, g: Options.Gravity) Rect {
        return placeIn(self.wd.contentRect().justSize(), minSize(id, min_size), e, g);
    }

    pub fn screenRectScale(self: *Self, rect: Rect) RectScale {
        return self.wd.contentRectScale().rectToScreen(rect);
    }

    pub fn minSizeForChild(self: *Self, s: Size) void {
        self.wd.minSizeMax(self.wd.padSize(s));
    }

    pub fn processEvent(self: *Self, e: *Event, bubbling: bool) void {
        _ = bubbling;
        switch (e.evt) {
            .mouse => |me| {
                switch (me.action) {
                    .focus => {},
                    .press => {},
                    .release => {},
                    .motion => {},
                    .wheel_y => {},
                    .position => {
                        // TODO: set this event to handled if there is an existing subtabBar and motion is towards the popup
                        if (mouseTotalMotion().nonZero()) {
                            self.mouse_over = true;
                        }
                    },
                }
            },
            else => {},
        }

        if (e.bubbleable()) {
            // self.wd.parent.processEvent(e, false);
            self.wd.parent.processEvent(e, true);
        }
    }

    pub fn deinit(self: *Self) void {
        self.box.deinit();
        self.wd.minSizeSetAndRefresh();
        self.wd.minSizeReportToParent();
        _ = parentSet(self.wd.parent);
    }

    pub fn itemLabel(self: *Self, src: std.builtin.SourceLocation, label_str: []const u8, selected: bool) !?Rect {
        const flow: TabBarItemWidget.Flow = switch (self.dir) {
            .horizontal => .horizontal,
            .vertical => .vertical,
        };
        var tbi = try tabBarItem(src, .{ .flow = flow, .selected = selected }, .{});
        defer tbi.deinit();

        var ret: ?Rect = null;
        if (tbi.activeRect()) |r| {
            ret = r;
        }

        var labelopts: Options = Options{};
        if (tbi.show_active) {
            if (tbi.init_opts.selected) {
                labelopts = labelopts.override(.{
                    .color_style = .accent,
                    .font_style = .heading,
                });
            }
        }

        try labelNoFmt(@src(), label_str, labelopts);

        return ret;
    }

    // pub fn tabBarItemIcon(self: *Self, src: std.builtin.SourceLocation, name: []const u8, tvg_bytes: []const u8, selected: bool) !?Rect {
    //     const flow: TabBarItemWidget.Flow = switch (self.dir) {
    //         .horizontal => .horizontal,
    //         .vertical => .vertical,
    //     };
    //     var tbi = try tabBarItem(src, .{ .flow = flow, .selected = selected }, .{});
    //     defer tbi.deinit();

    //     var ret: ?Rect = null;
    //     if (tbi.activeRect()) |r| {
    //         ret = r;
    //     }

    //     var iconopts = Options{};
    //     if (tbi.show_active) {
    //         if (tbi.init_opts.selected) {
    //             switch (tbi.init_opts.flow) {
    //                 .horizontal => {
    //                     iconopts = iconopts.override(.{
    //                         .color_style = .accent,
    //                         .font_style = .heading,
    //                         .padding = .{ .x = 5, .y = 5, .w = 5, .h = 8 },
    //                         .border = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
    //                         .margin = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
    //                     });
    //                 },
    //                 .vertical => {
    //                     iconopts = iconopts.override(.{
    //                         .color_style = .accent,
    //                         .font_style = .heading,
    //                         .padding = .{ .x = 4, .y = 4, .w = 4, .h = 4 },
    //                         .border = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
    //                         .margin = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
    //                     });
    //                 },
    //             }
    //         }
    //     }

    //     try icon(@src(), name, tvg_bytes, iconopts);

    //     return ret;
    // }
};

pub fn tabBarItemLabel(src: std.builtin.SourceLocation, label_str: []const u8, init_opts: TabBarItemWidget.InitOptions, opts: Options) !?Rect {
    var tbi = try tabBarItem(src, init_opts, opts);

    var labelopts = opts.strip();

    var ret: ?Rect = null;
    if (tbi.activeRect()) |r| {
        ret = r;
    }

    if (tbi.show_active) {
        if (tbi.init_opts.selected) {
            switch (tbi.init_opts.flow) {
                .horizontal => {
                    // labelopts = labelopts.override(.{ .color_style = .accent, .font_style = .heading });
                    labelopts = labelopts.override(.{
                        .color_style = .accent,
                        .font_style = .heading,
                    });
                },
                .vertical => {
                    // labelopts = labelopts.override(.{ .color_style = .accent, .font_style = .heading });
                    labelopts = labelopts.override(.{
                        .color_style = .accent,
                        .font_style = .heading,
                    });
                },
            }
        }
    }

    try labelNoFmt(@src(), label_str, labelopts);

    tbi.deinit();

    return ret;
}

// pub fn tabBarItemIcon(src: std.builtin.SourceLocation, name: []const u8, tvg_bytes: []const u8, init_opts: TabBarItemWidget.InitOptions, opts: Options) !?Rect {
//     var mi = try tabBarItem(src, init_opts, opts);

//     var iconopts = opts.strip();

//     var ret: ?Rect = null;
//     if (mi.activeRect()) |r| {
//         ret = r;
//     }

//     if (mi.show_active) {
//         iconopts = iconopts.override(.{ .color_style = .accent });
//     }

//     try icon(@src(), name, tvg_bytes, iconopts);

//     mi.deinit();

//     return ret;
// }

pub fn tabBarItem(src: std.builtin.SourceLocation, init_opts: TabBarItemWidget.InitOptions, opts: Options) !*TabBarItemWidget {
    var ret = try currentWindow().arena.create(TabBarItemWidget);
    ret.* = TabBarItemWidget.init(src, init_opts, opts);
    try ret.install(.{});
    return ret;
}

pub const TabBarItemWidget = struct {
    const Self = @This();
    pub var horizontal_defaults: Options = .{
        .color_style = .content,
        .corner_radius = .{ .x = 5, .y = 5, .w = 0, .h = 0 },
        .padding = .{ .x = 4, .y = 4, .w = 4, .h = 4 },
        .border = .{ .x = 1, .y = 1, .w = 1, .h = 1 },
        .margin = .{ .x = 1, .y = 1, .w = 1, .h = 12 },
        .expand = .horizontal,
        .font_style = .body,
    };
    pub var horizontal_defaults_selected: Options = .{
        .color_style = .content,
        .corner_radius = .{ .x = 5, .y = 5, .w = 0, .h = 0 },
        .padding = .{ .x = 4, .y = 4, .w = 4, .h = 4 },
        .border = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
        .margin = .{ .x = 1, .y = 1, .w = 1, .h = 1 },
        .expand = .horizontal,
        .font_style = .heading,
    };
    pub var vertical_defaults: Options = .{
        .color_style = .content,
        .corner_radius = .{ .x = 0, .y = 5, .w = 5, .h = 0 },
        .padding = .{ .x = 4, .y = 4, .w = 4, .h = 4 },
        .border = .{ .x = 1, .y = 1, .w = 1, .h = 1 },
        .margin = .{ .x = 1, .y = 1, .w = 4, .h = 1 },
        .expand = .horizontal,
        .font_style = .body,
    };
    pub var vertical_defaults_selected: Options = .{
        .color_style = .content,
        .corner_radius = .{ .x = 0, .y = 5, .w = 5, .h = 0 },
        .padding = .{ .x = 4, .y = 4, .w = 4, .h = 4 },
        .border = .{ .x = 0, .y = 0, .w = 0, .h = 0 },
        .margin = .{ .x = 4, .y = 1, .w = 1, .h = 1 },
        .expand = .horizontal,
        .font_style = .accent,
    };

    pub const Flow = enum {
        horizontal,
        vertical,
    };

    pub const InitOptions = struct {
        selected: bool = false,
        focus_on_hover: bool = true,
        flow: Flow = .horizontal,
    };

    wd: WidgetData = undefined,
    highlight: bool = false,
    init_opts: InitOptions = undefined,
    activated: bool = false,
    show_active: bool = false,
    mouse_over: bool = false,

    pub fn init(src: std.builtin.SourceLocation, init_opts: InitOptions, opts: Options) Self {
        var self = Self{};
        const defaults: Options = switch (init_opts.flow) {
            .horizontal => blk: {
                switch (init_opts.selected) {
                    true => break :blk horizontal_defaults_selected,
                    false => break :blk horizontal_defaults,
                }
            },
            .vertical => blk: {
                switch (init_opts.selected) {
                    true => break :blk vertical_defaults_selected,
                    false => break :blk vertical_defaults,
                }
            },
        };
        const options: Options = defaults.override(opts);
        self.wd = WidgetData.init(src, .{}, options);
        self.init_opts = init_opts;
        self.show_active = init_opts.selected;
        return self;
    }

    pub fn install(self: *Self, opts: struct { process_events: bool = true, focus_as_outline: bool = true }) !void {
        try self.wd.register("TabBarItem", null);

        if (self.wd.visible()) {
            try tabIndexSet(self.wd.id, self.wd.options.tab_index);
        }

        if (opts.process_events) {
            var evts = events();
            for (evts) |*e| {
                if (eventMatch(e, .{ .id = self.data().id, .r = self.data().borderRectScale().r })) {
                    self.processEvent(e, false);
                }
            }
        }

        try self.wd.borderAndBackground(.{});

        var focused: bool = false;
        if (!self.show_active) {
            if (self.wd.id == focusedWidgetId()) {
                focused = true;
            } else if (self.wd.id == focusedWidgetIdInCurrentSubwindow() and self.highlight) {
                focused = true;
            }
            if (focused) {
                if (self.mouse_over) {
                    self.show_active = true;
                    try self.wd.focusBorder();
                    _ = parentSet(self.widget());
                    return;
                } else {
                    focused = false;
                    self.show_active = false;
                    focusWidget(null, null);
                }
            }
        } else {
            // self.activated == true;
            // self.show_active = true;
            const rs = self.wd.backgroundRectScale();
            try pathAddRect(rs.r, self.wd.options.corner_radiusGet().scale(rs.s));
            try pathFillConvex(self.wd.options.color(.accent));
            _ = parentSet(self.widget());
            return;
        }

        // self.show_active == false.
        if ((self.wd.id == focusedWidgetIdInCurrentSubwindow()) or self.highlight) {
            const rs = self.wd.backgroundRectScale();
            try pathAddRect(rs.r, self.wd.options.corner_radiusGet().scale(rs.s));
            try pathFillConvex(self.wd.options.color(.hover));
        } else if (self.wd.options.backgroundGet()) {
            const rs = self.wd.backgroundRectScale();
            try pathAddRect(rs.r, self.wd.options.corner_radiusGet().scale(rs.s));
            try pathFillConvex(self.wd.options.color(.fill));
        }
        _ = parentSet(self.widget());
    }

    pub fn activeRect(self: *const Self) ?Rect {
        if (self.activated) {
            const rs = self.wd.backgroundRectScale();
            return rs.r.scale(1 / windowNaturalScale());
        } else {
            return null;
        }
    }

    pub fn widget(self: *Self) Widget {
        return Widget.init(self, data, rectFor, screenRectScale, minSizeForChild, processEvent);
    }

    pub fn data(self: *Self) *WidgetData {
        return &self.wd;
    }

    pub fn rectFor(self: *Self, id: u32, min_size: Size, e: Options.Expand, g: Options.Gravity) Rect {
        return placeIn(self.wd.contentRect().justSize(), minSize(id, min_size), e, g);
    }

    pub fn screenRectScale(self: *Self, rect: Rect) RectScale {
        return self.wd.contentRectScale().rectToScreen(rect);
    }

    pub fn minSizeForChild(self: *Self, s: Size) void {
        self.wd.minSizeMax(self.wd.padSize(s));
    }

    pub fn processEvent(self: *Self, e: *Event, bubbling: bool) void {
        _ = bubbling;
        var focused: bool = false;
        var focused_id: u32 = 0;
        if (focusedWidgetIdInCurrentSubwindow()) |_focused_id| {
            focused = self.wd.id == _focused_id;
            focused_id = _focused_id;
        }
        switch (e.evt) {
            .mouse => |me| {
                switch (me.action) {
                    .focus => {
                        e.handled = true;
                        focusSubwindow(null, null); // focuses the window we are in
                        focusWidget(self.wd.id, e.num);
                    },
                    .press => {
                        if (me.button == enums.Button.left) {
                            e.handled = true;
                        }
                    },
                    .release => {
                        e.handled = true;
                        self.activated = true;
                        refresh();
                    },
                    .motion => {},
                    .wheel_y => {},
                    .position => {
                        e.handled = true;
                        // We get a .position mouse event every frame.  If we
                        // focus the tabBar item under the mouse even if it's not
                        // moving then it breaks keyboard navigation.
                        if (mouseTotalMotion().nonZero()) {
                            self.highlight = true;
                            self.mouse_over = true;
                        }
                    },
                }
            },
            .key => |ke| {
                if (ke.code == .space and ke.action == .down) {
                    e.handled = true;
                    if (!self.activated) {
                        self.activated = true;
                        refresh();
                    }
                } else if (ke.code == .right and ke.action == .down) {
                    e.handled = true;
                }
            },
            else => {},
        }

        if (e.bubbleable()) {
            self.wd.parent.processEvent(e, true);
        }
    }

    pub fn deinit(self: *Self) void {
        self.wd.minSizeSetAndRefresh();
        self.wd.minSizeReportToParent();
        _ = parentSet(self.wd.parent);
    }
};
